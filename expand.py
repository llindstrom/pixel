"""Compile loop descriptions file into a Python module

Need to separate out global and local symbol tables to support multiple
module level function declarations.

Get rid of 'arg_1 = argument_1' etc.
"""

import loops.typer
import loops.python
from loops import astkit
import ast
import re
import ctypes   # For type inlining

def expand(source, path, symbol_table):
    """expand(source: str, path: string, glbs: dict) -> str
    """

    tree, typer_symtab = stage_1(source, path, symbol_table)
    return stage_2(tree), typer_symtab

def stage_1(source, path, symbol_table):
    # Stage One: General template
    symtab = symbol_table.copy()
    module_ast = ast.parse(source, path, 'exec')
    loops.blitkit.inline_decorators(module_ast, symtab)
    return module_ast, typer(module_ast, symtab)

def stage_2(module_ast):
    # Stage Two: Python code
    loops.python.inline_types(module_ast)
    return module_ast

def typer(module, symtab):
    """Add type annotation"""

    visitor = loops.typer.Typer(symtab)
    visitor.visit(module)
    return visitor.symtab

# This is what should be generated by expand.expand for
#
#     @loops.blitter(loops.Array2, loops.Surface)
#     def do_blit(s, d):
#         d.pixel = s
#     
# Function globals are: 'ctypes'
#
import ctypes

def do_blit(arg_1: 'loops.Array2', arg_2: 'loops.Surface'):
    # Array dimensions and starting points
    dim_0, dim_1 = arg_1.shape
    parg_1 = arg_1.__array_interface__['data'][0]
    parg_2 = arg_2._pixels_address

    # Pointer increments
    (arg_1_stride_0, arg_1_stride_1) = arg_1.strides
    (arg_2_stride_0, arg_2_stride_1) = (arg_2.get_bytesize(), arg_2.get_pitch())
    arg_1_delta_1 = arg_1_stride_1 - arg_1_stride_0 * dim_0
    arg_2_delta_1 = arg_2_stride_1 - arg_2_stride_0 * dim_0

    # Loop over index 1...
    arg_1_end_1 = parg_1 + arg_1_stride_1 * dim_1
    while parg_1 < arg_1_end_1:
        # Loop over index 0...
        arg_1_end_0 = parg_1 + arg_1_stride_0 * dim_0
        while parg_1 < arg_1_end_0:
            ctypes.c_long.from_address(parg_2).value = int(ctypes.c_long.from_address(parg_1).value)
            parg_1 += arg_1_stride_0
            parg_2 += arg_2_stride_0

        parg_1 += arg_1_delta_1
        parg_2 += arg_2_delta_1
